-- Create the challenges table
create table challenges (
  id uuid default gen_random_uuid() primary key,
  counter bigint generated by default as identity,
  name varchar(255) not null,
  description text,
  category varchar(100),
  difficulty integer,
  reward varchar(100),
  challenge_type varchar(50), -- Type of challenge (QR, GPS, Photo, etc.)
  image_url varchar(255), -- URL to the challenge image
  start_date timestamptz,
  end_date timestamptz,
  deleted boolean default false, -- Soft delete flag
  created_at timestamptz default now(),
  updated_at timestamptz default now()
);

-- Create the locations table
create table locations (
  id uuid default gen_random_uuid() primary key,
  challenge_id uuid references challenges(id) on delete cascade,
  name varchar(255),
  latitude double precision,
  longitude double precision,
  address varchar(255)
);

-- Create the challenge details table
create table challenge_details (
  id uuid default gen_random_uuid() primary key,
  challenge_id uuid references challenges(id) on delete cascade,
  detail_type varchar(50), -- GPS, QR, Photo, etc.
  details jsonb -- Specific data for the challenge
);

-- Row-level security policies for challenges table
alter table challenges enable row level security;



-- Enable real-time functionality
alter publication supabase_realtime add table challenges, locations, challenge_details;

-- Trigger to handle timestamps for `created_at` and `updated_at`
create or replace function handle_times()
    returns trigger as
    $$
    begin
        if (tg_op = 'insert') then
            new.created_at := now();
            new.updated_at := now();
        elsif (tg_op = 'update') then
            new.updated_at := now();
            -- Keep the created_at value unchanged
        end if;
        return new;
    end;
    $$ language plpgsql;

-- Create the trigger
create trigger handle_times
    before insert or update on challenges
    for each row
    execute procedure handle_times();

create trigger handle_times_locations
    before insert or update on locations
    for each row
    execute procedure handle_times();
