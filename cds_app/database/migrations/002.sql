-- Create the User table
CREATE TABLE "User" (
    id UUID NOT NULL DEFAULT gen_random_uuid() PRIMARY KEY,
    username VARCHAR(100) NOT NULL,
    age INT NOT NULL,
    avatar_url TEXT,
    green_coins INT NOT NULL
);

-- Create the ChallengeType table
CREATE TABLE "ChallengeType" (
    id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    type VARCHAR(50) NOT NULL
);

-- Create the ChallengeTag table
CREATE TABLE "ChallengeTag" (
    id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    tag VARCHAR(50) NOT NULL
);

-- Create the LocationType table
CREATE TABLE "LocationType" (
    id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(100) NOT NULL
);

CREATE TABLE "LocationStatus" (
    id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    status TEXT NOT NULL
);

-- Create the Location table first, since Challenge references it
CREATE TABLE "Location" (
    id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    point gis.GEOGRAPHY(POINT, 4326),
    name text NOT NULL,
    description TEXT,
    image_url TEXT,
    location_type INT REFERENCES "LocationType",
    sustainability_score INT,
    status TEXT,
    address TEXT,
    solicited_at TIMESTAMP,
    email TEXT,
    phone_number TEXT,
    opening_hours TEXT
);

-- Create the LocationCapability table
CREATE TABLE "LocationCapability" (
    id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(100) NOT NULL
);

-- Create the LocationCapabilities junction table
CREATE TABLE "LocationCapabilities" (
    location_id INT NOT NULL REFERENCES "Location",
    capability_id INT NOT NULL REFERENCES "LocationCapability",
    PRIMARY KEY (location_id, capability_id)
);

CREATE TABLE "CompletionType" (
    id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    type TEXT NOT NULL
);

-- Now we can create the Challenge table that references Location
CREATE TABLE "Challenge" (
    id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    type INT NOT NULL REFERENCES "ChallengeType",
    completion_type INT REFERENCES "CompletionType",
    location INT REFERENCES "Location",
    name TEXT,
    description TEXT,
    reward INT NOT NULL,
    active BOOLEAN NOT NULL DEFAULT true,
    repeatable BOOLEAN NOT NULL DEFAULT false,
    cooldown_time INT,
    cover_url TEXT,
    -- priority NOT NULL?
    priority INT,
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),
    updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),
    expiration_date TIMESTAMP WITH TIME ZONE NOT NULL
);

-- Create the ChallengeTags junction table
CREATE TABLE "ChallengeTags" (
    challenge_id INT NOT NULL REFERENCES "Challenge",
    tag_id INT NOT NULL REFERENCES "ChallengeTag",
    PRIMARY KEY (challenge_id, tag_id)
);

-- Create the RequiredCapability table
CREATE TABLE "RequiredCapability" (
    challenge_id INT NOT NULL REFERENCES "Challenge",
    capability_id INT NOT NULL REFERENCES "LocationCapability",
    PRIMARY KEY (challenge_id, capability_id)
);

-- Create the AcceptedChallenge table
CREATE TABLE "AcceptedChallenge" (
    id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id UUID NOT NULL REFERENCES "User",
    challenge_id INT NOT NULL REFERENCES "Challenge",
    completed BOOLEAN NOT NULL DEFAULT false,
    tipo TEXT,
    accepted_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),
    completed_at TIMESTAMP WITH TIME ZONE,
    location_id INT REFERENCES "Location",
    qr_secret UUID default gen_random_uuid(),
    image_url_proof TEXT
);

-- Create the Route table
CREATE TABLE "Route" (
    id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    location_id INT NOT NULL REFERENCES "Location",
    linestring gis.GEOGRAPHY(LINESTRING, 4326),
    total_length_meters INT
);

-- Create the TransportMedium table
CREATE TABLE "TransportMedium" (
    id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name TEXT NOT NULL,
    sustainability_score INT NOT NULL
);

-- Create the RouteTransportMedium junction table
CREATE TABLE "RouteTransportMedium" (
    route_id INT NOT NULL REFERENCES "Route",
    transport_medium_id INT NOT NULL REFERENCES "TransportMedium",
    PRIMARY KEY (route_id, transport_medium_id)
);

CREATE TABLE "Prize" (
    id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    price INT NOT NULL,
    description text NOT NULL,
    image_url TEXT,
    coupon_code UUID NOT NULL DEFAULT gen_random_uuid()
);

-- Create triggers for updating timestamps
CREATE
OR REPLACE FUNCTION update_modified_column() 
RETURNS TRIGGER AS $$ 
BEGIN 
  NEW.updated_at = now();
  RETURN NEW;
END;
$$ language 'plpgsql';

CREATE TRIGGER update_challenge_modtime BEFORE
UPDATE
    ON "Challenge" FOR EACH ROW EXECUTE PROCEDURE update_modified_column();

-- Enable row level security
ALTER TABLE
    "Challenge" ENABLE ROW LEVEL SECURITY;

ALTER TABLE
    "AcceptedChallenge" ENABLE ROW LEVEL SECURITY;

ALTER TABLE
    "User" ENABLE ROW LEVEL SECURITY;

-- Example RLS policies (adjust as needed for your application)
CREATE POLICY "Challenges are viewable by everyone" ON "Challenge" FOR
SELECT
    USING (true);

CREATE POLICY "Users can only view their own profile" ON "User" FOR
SELECT
    USING (auth.uid() = id);

CREATE POLICY "Users can view their own accepted challenges" ON "AcceptedChallenge" FOR
SELECT
    USING (auth.uid() = user_id);

-- Add real-time functionality
CREATE PUBLICATION supabase_realtime FOR TABLE "Challenge",
"AcceptedChallenge",
"Location";

-- ALTER PUBLICATION supabase_realtime ADD TABLE "Challenge", "AcceptedChallenge", "Location";